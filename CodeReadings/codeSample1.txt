===================================
Obtained from reading the FileProcessing Declarations
===================================

class TempFile:\n\tdef __init__(self, file_address: str):\n\t''' Handles file opening and initialization of optimizer and parallelizer and etc'''\n\tpass\n\n\tdef __del__(self):\n\t''' cleanup'''\n\tpass\n\n\tdef __str__(self):\n\t'''Calling str(TempFile) returns a string of current file (with modifications)'''\n\tpass\n\n\tdef run(self):\n\t''' Runs the optimizer and the parallelizer by calling their run functions on each scope object in order of ascending scope '''\n\tpass\n\n\tdef is_done(self):\n\t''' returns if the file processing and optimizing is done '''\n\tpass\n\n\tdef get(self, line: int):\n\t'''gets the requested line'''\n\tpass\n\n\tdef replace(self, old: ScopeObject, new: ScopeObject):\n\t''' replaces the code specified by one object with code specified by the 2nd '''\n\tpass\n\n\tdef writeTo(self, root_dir: str):\n\t''' Write the current file state to the root directory '''\n\tpass\n\n\tdef __iter__(self):\n\t''' enables for each loop -- a line by line '''\n\tpass\n\n\tdef __add__(self, other: TempFile):\n\t''' combines two files (for parallelization purposes) '''\n\tpass\n\nclass ScopeObject:\n\tdef __init__(self, lines: str, scope: str):\n\t''' takes a string of python code and scope '''\n\tpass\n\n\tdef list(self):\n\t''' returns the lines as a list (call like obj.list())'''\n\tpass\n\n\tdef __str__(self):\n\t''' returns the string of the lines '''\n\tpass\n\n\tdef replace_line(self, old: str, new: str):\n\t''' replace a line with a new line '''\n\tpass\n\n\tdef ascend_scope(self, var_name: str):\n\t''' moves the requested variable to a higher scope if possible, return false if not'''\n\tpass\n\n\tdef replace(self, old_lines: str, new_lines: str):\n\t''' replace the old lines with the new lines '''\n\tpass\n
